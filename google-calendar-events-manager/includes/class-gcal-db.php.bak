<?php
/**
 * Database handling class for Google Calendar Events Manager
 * 
 * @package Google_Calendar_Events
 * @since 1.0.0
 */

// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}

// Include WordPress database upgrade functions
if (!function_exists('dbDelta')) {
    require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
}

/**
 * Handles all database operations for the Google Calendar Events plugin
 * 
 * This class provides methods for creating, reading, updating, and deleting
 * calendar events from the database, as well as managing the database schema.
 */
class GCAL_DB {
    /**
     * Current database version
     * 
     * @since 1.0.0
     * @var string
     */
    const DB_VERSION = '1.0.0';
    
    /**
     * The database table name
     *
     * @since 1.0.0
     * @var string
     */
    private $table_name;
    
    /**
     * WordPress database abstraction object
     *
     * @since 1.0.0
     * @var wpdb
     */
    protected $wpdb;
    
    /**
     * Class constructor
     * 
     * @since 1.0.0
     */
    public function __construct() {
        global $wpdb;
        $this->wpdb = $wpdb;
        $this->table_name = $wpdb->prefix . 'gcal_events';
    }
    
    /**
     * Initialize the database class
     * 
     * @since 1.0.0
     * @return void
     */
    public function init() {
        // Create or update the database table if needed
        $this->maybe_create_table();
    }
    
    /**
     * Check if we need to create or update the database table
     * 
     * @since 1.0.0
     * @return void
     */
    private function maybe_create_table() {
        $current_version = get_option('gcal_db_version', '0');
        
        // Only create/update table if needed
        if (version_compare($current_version, self::DB_VERSION, '<')) {
            $this->create_table();
            update_option('gcal_db_version', self::DB_VERSION);
        }
    }
    
    /**
     * Create the events table
     * 
     * @since 1.0.0
     * @return bool True if table was created or already exists, false on failure
     */
    public function create_table() {
        $charset_collate = $this->wpdb->get_charset_collate();
        
        $sql = "CREATE TABLE IF NOT EXISTS `{$this->table_name}` (
            id mediumint(9) NOT NULL AUTO_INCREMENT,
            uid varchar(255) NOT NULL,
            summary text NOT NULL,
            location text DEFAULT '',
            description text DEFAULT '',
            start_time datetime NOT NULL,
            end_time datetime NOT NULL,
            last_modified datetime NOT NULL,
            rrule text DEFAULT '',
            created_at datetime DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY  (id),
            UNIQUE KEY uid (uid),
            KEY start_time (start_time)
        ) $charset_collate;";
        
        require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
        dbDelta($sql);
        
        // Check if we need to add the rrule column (for backward compatibility)
        $column_exists = $this->wpdb->get_results(
            $this->wpdb->prepare(
                "SELECT COLUMN_NAME 
                FROM INFORMATION_SCHEMA.COLUMNS 
                WHERE TABLE_SCHEMA = %s 
                AND TABLE_NAME = %s 
                AND COLUMN_NAME = 'rrule'",
                DB_NAME,
                $this->table_name
            )
        );
        
        if (empty($column_exists)) {
            $this->wpdb->query("ALTER TABLE `{$this->table_name}` ADD COLUMN rrule text DEFAULT ''");
        }
        
        return true;
    }
    
    /**
     * Drop the events table
     * 
     * @since 1.0.0
     * @return bool True if table was dropped or didn't exist, false on failure
     */
    public function drop_table() {
        if (!$this->table_exists()) {
            return true;
        }
        
        $result = $this->wpdb->query("DROP TABLE IF EXISTS `{$this->table_name}`");
        return $result !== false;
    }
    
    /**
     * Check if the events table exists
     * 
     * @since 1.0.0
     * @return bool True if table exists, false otherwise
     */
    public function table_exists() {
        return $this->wpdb->get_var("SHOW TABLES LIKE '{$this->table_name}'") === $this->table_name;
    }
    
    /**
     * Get events from the database
     * 
     * @since 1.0.0
     * @param int $limit Number of events to return (0 for no limit)
     * @param bool $show_past Whether to include past events
     * @param array $args Additional query arguments
     * @return array Array of event objects
     */
    public function get_events($limit = 0, $show_past = false, $args = []) {
        $defaults = [
            'start_date' => '',
            'end_date'   => '',
            'orderby'    => 'start_time',
            'order'      => 'ASC',
            'search'     => '',
        ];
        
        $args = wp_parse_args($args, $defaults);
        $query = "SELECT * FROM `{$this->table_name}` WHERE 1=1";
        $query_args = [];
        
        // Add date range conditions
        if (!empty($args['start_date'])) {
            $query .= " AND start_time >= %s";
            $query_args[] = $args['start_date'];
        }
        
        if (!empty($args['end_date'])) {
            $query .= " AND end_time <= %s";
            $query_args[] = $args['end_date'];
        }
        
        // Add search condition
        if (!empty($args['search'])) {
            $query .= " AND (summary LIKE %s OR description LIKE %s OR location LIKE %s)";
            $search_term = '%' . $this->wpdb->esc_like($args['search']) . '%';
            $query_args = array_merge($query_args, [$search_term, $search_term, $search_term]);
        }
        
        // Add ordering
        $order = in_array(strtoupper($args['order']), ['ASC', 'DESC']) ? $args['order'] : 'ASC';
        $orderby = in_array($args['orderby'], ['start_time', 'end_time', 'last_modified']) ? $args['orderby'] : 'start_time';
        $query .= " ORDER BY $orderby $order";
        
        // Add limit
        if ($limit > 0) {
            $query .= " LIMIT %d";
            $query_args[] = $limit;
        }
        
        // Prepare and execute the query
        if (!empty($query_args)) {
            $query = $this->wpdb->prepare($query, $query_args);
        }
        
        $events = $this->wpdb->get_results($query, ARRAY_A);
        
        // Filter out past events if needed
        if (!$show_past && !empty($events)) {
            $now = current_time('mysql');
            $events = array_filter($events, function($event) use ($now) {
                return $event['end_time'] >= $now;
            });
            // Re-index array after filtering
            $events = array_values($events);
        }
        
        return $events;
    }
            description text DEFAULT '',
            start_time datetime NOT NULL,
            end_time datetime NOT NULL,
            last_modified datetime NOT NULL,
            rrule text DEFAULT '',
            created_at datetime DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY  (id),
            UNIQUE KEY uid (uid),
            KEY start_time (start_time)
        ) $charset_collate;";
        
        require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
        return dbDelta($sql) !== false;
    }
    
    /**
     * Drop the events table
     * 
     * @since 1.0.0
     * @return bool True if table was dropped or didn't exist, false on failure
     */
    public function drop_table() {
        if (!$this->table_exists()) {
            return true;
        }
        
        $result = $this->wpdb->query("DROP TABLE IF EXISTS `{$this->table_name}`");
        return $result !== false;
    }
    
    /**
     * Check if the events table exists
     * 
     * @since 1.0.0
     * @return bool True if the table exists, false otherwise
     */
    public function table_exists() {
        return $this->wpdb->get_var("SHOW TABLES LIKE '{$this->table_name}'") === $this->table_name;
    }
    
    /**
     * Get events from the database
     * 
     * @since 1.0.0
     * @param array $args {
     *     Optional. Array of query parameters.
     *     
     *     @type int    $limit       Number of events to return. Default 0 (no limit).
     *     @type bool   $show_past   Whether to include past events. Default false.
     *     @type string $orderby     Field to order by. Default 'start_time'.
     *     @type string $order       Sort order. Default 'ASC'.
     *     @type string $start_date  Only include events after this date.
     *     @type string $end_date    Only include events before this date.
     * }
     * @return array Array of event objects
     */
    public function get_events($args = []) {
        $defaults = [
            'limit' => 0,
            'show_past' => false,
            'orderby' => 'start_time',
            'order' => 'ASC',
            'start_date' => null,
            'end_date' => null,
        ];
        
        $args = wp_parse_args($args, $defaults);
        $query = "SELECT * FROM `{$this->table_name}` WHERE 1=1";
        $query_args = [];
        
        // Add date range conditions if provided
        if ($args['start_date']) {
            $query .= " AND start_time >= %s";
            $query_args[] = $args['start_date'];
        }
        
        if ($args['end_date']) {
            $query .= " AND end_time <= %s";
            $query_args[] = $args['end_date'];
        }
        
        // Add sorting
        $orderby = in_array(strtolower($args['orderby']), ['start_time', 'end_time', 'created_at']) ? 
            $args['orderby'] : 'start_time';
        $order = strtoupper($args['order']) === 'DESC' ? 'DESC' : 'ASC';
        $query .= " ORDER BY {$orderby} {$order}";
        
        // Add limit if specified
        if ($args['limit'] > 0) {
            $query .= " LIMIT %d";
            $query_args[] = $args['limit'];
        }
        
        // Prepare and run the query
        if (!empty($query_args)) {
            $query = $this->wpdb->prepare($query, $query_args);
        }
        
        $events = $this->wpdb->get_results($query, ARRAY_A);
        
        // If not showing past events, filter them out
        if (!$args['show_past']) {
            $timezone = wp_timezone();
            $now = new DateTime('now', $timezone);
            
            $events = array_filter($events, function($event) use ($now, $timezone) {
                $event_end = new DateTime($event['end_time'], $timezone);
                return $event_end >= $now;
            });
            
            // Re-index the array after filtering
            $events = array_values($events);
        }
        
        return $events;
    }
    
    /**
     * Get a single event by ID
     * 
     * @since 1.0.0
     * @param int $event_id The event ID
     * @return array|false The event data, or false if not found
     */
    public function get_event($event_id) {
        if (empty($event_id)) {
            return false;
        }
        
        return $this->wpdb->get_row(
            $this->wpdb->prepare(
                "SELECT * FROM `{$this->table_name}` WHERE id = %d LIMIT 1",
                $event_id
            ),
            ARRAY_A
        );
    }
    
    /**
     * Save an event to the database
     * 
     * @since 1.0.0
     * @param array $event_data The event data to save
     * @return int|false The inserted/updated event ID, or false on failure
     */
    public function save_event($event_data) {
        $defaults = [
            'uid' => '',
            'summary' => '',
            'location' => '',
            'description' => '',
            'start_time' => current_time('mysql'),
            'end_time' => current_time('mysql'),
            'last_modified' => current_time('mysql'),
            'rrule' => ''
        ];
        
        // Merge with defaults and sanitize
        $event_data = wp_parse_args($event_data, $defaults);
        $event_data = array_map('wp_strip_all_tags', $event_data);
        
        // Check if this is an update
        $existing_id = $this->get_event_id_by_uid($event_data['uid']);
        
        if ($existing_id) {
            // Update existing event
            $result = $this->wpdb->update(
                $this->table_name,
                $event_data,
                ['id' => $existing_id],
                ['%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s'],
                ['%d']
            );
            
            return $result !== false ? $existing_id : false;
        } else {
            // Insert new event
            $result = $this->wpdb->insert(
                $this->table_name,
                $event_data,
                ['%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s']
            );
            
            return $result ? $this->wpdb->insert_id : false;
        }
    }
    
    /**
     * Delete an event by ID
     * 
     * @since 1.0.0
     * @param int $event_id The event ID to delete
     * @return bool True on success, false on failure
     */
    public function delete_event($event_id) {
        if (empty($event_id)) {
            return false;
        }
        
        return (bool) $this->wpdb->delete(
            $this->table_name,
            ['id' => $event_id],
            ['%d']
        );
    }
    
    /**
     * Get an event ID by UID
     * 
     * @since 1.0.0
     * @param string $uid The event UID
     * @return int|false The event ID, or false if not found
     */
    public function get_event_id_by_uid($uid) {
        if (empty($uid)) {
            return false;
        }
        
        return $this->wpdb->get_var(
            $this->wpdb->prepare(
                "SELECT id FROM `{$this->table_name}` WHERE uid = %s LIMIT 1",
                $uid
            )
        );
    }
    
    /**
     * Delete all events from the database
     * 
     * @since 1.0.0
     * @return int|false Number of rows deleted, or false on failure
     */
    public function delete_all_events() {
        return $this->wpdb->query("TRUNCATE TABLE `{$this->table_name}`");
    }
    
    /**
     * Delete old events that have already ended
     * 
     * @since 1.0.0
     * @return int|false Number of rows deleted, or false on failure
     */
    public function delete_old_events() {
        return $this->wpdb->query(
            $this->wpdb->prepare(
                "DELETE FROM `{$this->table_name}` WHERE end_time < %s",
                current_time('mysql')
            )
        );
    }
    
    /**
     * Get the database version
     * 
     * @since 1.0.0
     * @return string The current database version
     */
    public function get_db_version() {
        return get_option('gcal_db_version', '1.0');
    }
    
    /**
     * Update the database version
     * 
     * @since 1.0.0
     * @param string $version The new version number
     * @return bool True if version was updated, false on failure
     */
    public function update_db_version($version) {
        return update_option('gcal_db_version', $version);
    }
    
    /**
     * Clean up plugin data (for uninstall)
     * 
     * @since 1.0.0
     * @return bool True if cleanup was successful, false otherwise
     */
    public function cleanup() {
        // Delete all plugin options
        $options = [
            'gcal_google_api_key',
            'gcal_calendar_id',
            'gcal_refresh_interval',
            'gcal_last_sync',
            'gcal_db_version'
        ];
        
        $success = true;
        foreach ($options as $option) {
            if (get_option($option) !== false) {
                $success = delete_option($option) && $success;
            }
        }
        
        // Clear any scheduled events
        if (function_exists('wp_clear_scheduled_hook')) {
            wp_clear_scheduled_hook('gcal_sync_events');
        }
        
        // Clear any transients
        if (function_exists('delete_transient')) {
            delete_transient('gcal_events_cache');
        }
        
        return $success;
    }
    
    /**
     * Static method to create the events table (for backward compatibility)
     * 
     * @deprecated 1.1.0 Use instance method create_table() instead
     * @return bool True if table was created, false on failure
     */
    public static function create_events_table() {
        $db = new self();
        return $db->create_table();
    }
    
    /**
     * Create the events table
     * 
     * @since 1.0.0
     * @return bool True if table was created or already exists, false on failure
     */
    public function create_table() {
        global $wpdb;
        
        $charset_collate = $wpdb->get_charset_collate();
        $table_name = $this->table_name;
        
        $sql = "CREATE TABLE IF NOT EXISTS $table_name (
            id mediumint(9) NOT NULL AUTO_INCREMENT,
            uid varchar(255) NOT NULL,
            summary text NOT NULL,
            location text DEFAULT '',
            description text DEFAULT '',
            start_time datetime NOT NULL,
            end_time datetime NOT NULL,
            last_modified datetime NOT NULL,
            rrule text DEFAULT '',
            created_at datetime DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY  (id),
            UNIQUE KEY uid (uid),
            KEY start_time (start_time)
        ) $charset_collate;";
        
        require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
        return dbDelta($sql) !== false;
    }
    
    /**
     * Drop the events table
     * 
     * @since 1.0.0
     * @return bool True if table was dropped or didn't exist, false on failure
     */
    public function drop_table() {
        if (!$this->table_exists()) {
            return true;
        }
        
        $result = $this->wpdb->query("DROP TABLE IF EXISTS `{$this->table_name}`");
        return $result !== false;
    }
    
    /**
     * Check if the events table exists
     * 
     * @since 1.0.0
     * @return bool True if the table exists, false otherwise
     */
    public function table_exists() {
        return $this->wpdb->get_var("SHOW TABLES LIKE '{$this->table_name}'") === $this->table_name;
    }
    
    /**
     * Get events from the database
     * 
     * @since 1.0.0
     * @param array $args {
     *     Optional. Array of query parameters.
     *     
     *     @type int    $limit       Number of events to return. Default 0 (no limit).
     *     @type bool   $show_past   Whether to include past events. Default false.
     *     @type string $orderby     Field to order by. Default 'start_time'.
     *     @type string $order       Sort order. Default 'ASC'.
     *     @type string $start_date  Only include events after this date.
     *     @type string $end_date    Only include events before this date.
     * }
     * @return array Array of event objects
     */
    public function get_events($args = []) {
        $defaults = [
            'limit' => 0,
            'show_past' => false,
            'orderby' => 'start_time',
            'order' => 'ASC',
            'start_date' => null,
            'end_date' => null,
        ];
        
        $args = wp_parse_args($args, $defaults);
        $query = "SELECT * FROM `{$this->table_name}` WHERE 1=1";
        $query_args = [];
        
        // Add date range conditions if provided
        if ($args['start_date']) {
            $query .= " AND start_time >= %s";
            $query_args[] = $args['start_date'];
        }
        
        if ($args['end_date']) {
            $query .= " AND end_time <= %s";
            $query_args[] = $args['end_date'];
        }
        
        // Add sorting
        $orderby = in_array(strtolower($args['orderby']), ['start_time', 'end_time', 'created_at']) ? 
            $args['orderby'] : 'start_time';
        $order = strtoupper($args['order']) === 'DESC' ? 'DESC' : 'ASC';
        $query .= " ORDER BY {$orderby} {$order}";
        
        // Add limit if specified
        if ($args['limit'] > 0) {
            $query .= " LIMIT %d";
            $query_args[] = $args['limit'];
        }
        
        // Prepare and run the query
        if (!empty($query_args)) {
            $query = $this->wpdb->prepare($query, $query_args);
        }
        
        $events = $this->wpdb->get_results($query, ARRAY_A);
        
        // If not showing past events, filter them out
        if (!$args['show_past']) {
            $timezone = wp_timezone();
            $now = new DateTime('now', $timezone);
            
            $events = array_filter($events, function($event) use ($now, $timezone) {
                $event_end = new DateTime($event['end_time'], $timezone);
                return $event_end >= $now;
            });
            
            // Re-index the array after filtering
            $events = array_values($events);
        }
        
        return $events;
    }
    
    /**
     * Get a single event by ID
     * 
     * @since 1.0.0
     * @param int $event_id The event ID
     * @return array|false The event data, or false if not found
     */
    public function get_event($event_id) {
        if (empty($event_id)) {
            return false;
        }
        
        return $this->wpdb->get_row(
            $this->wpdb->prepare(
                "SELECT * FROM `{$this->table_name}` WHERE id = %d LIMIT 1",
                $event_id
            ),
            ARRAY_A
        );
    }
    
    /**
     * Save an event to the database
     * 
     * @since 1.0.0
     * @param array $event_data The event data to save
     * @return int|false The inserted/updated event ID, or false on failure
     */
    public function save_event($event_data) {
        $defaults = [
            'uid' => '',
            'summary' => '',
            'location' => '',
            'description' => '',
            'start_time' => current_time('mysql'),
            'end_time' => current_time('mysql'),
            'last_modified' => current_time('mysql'),
            'rrule' => ''
        ];
        
        // Merge with defaults and sanitize
        $event_data = wp_parse_args($event_data, $defaults);
        $event_data = array_map('wp_strip_all_tags', $event_data);
        
        // Check if this is an update
        $existing_id = $this->get_event_id_by_uid($event_data['uid']);
        
        if ($existing_id) {
            // Update existing event
            $result = $this->wpdb->update(
                $this->table_name,
                $event_data,
                ['id' => $existing_id],
                ['%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s'],
                ['%d']
            );
            
            return $result !== false ? $existing_id : false;
        } else {
            // Insert new event
            $result = $this->wpdb->insert(
                $this->table_name,
                $event_data,
                ['%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s']
            );
            
            return $result ? $this->wpdb->insert_id : false;
        }
    }
    
    /**
     * Delete an event by ID
     * 
     * @since 1.0.0
     * @param int $event_id The event ID to delete
     * @return bool True on success, false on failure
     */
    public function delete_event($event_id) {
        if (empty($event_id)) {
            return false;
        }
        
        return (bool) $this->wpdb->delete(
            $this->table_name,
            ['id' => $event_id],
            ['%d']
        );
    }
    
    /**
     * Get an event ID by UID
     * 
     * @since 1.0.0
     * @param string $uid The event UID
     * @return int|false The event ID, or false if not found
     */
    public function get_event_id_by_uid($uid) {
        if (empty($uid)) {
            return false;
        }
        
        return $this->wpdb->get_var(
            $this->wpdb->prepare(
                "SELECT id FROM `{$this->table_name}` WHERE uid = %s LIMIT 1",
                $uid
            )
        );
    }
    
    /**
     * Delete all events from the database
     * 
     * @since 1.0.0
     * @return int|false Number of rows deleted, or false on failure
     */
    public function delete_all_events() {
        return $this->wpdb->query("TRUNCATE TABLE `{$this->table_name}`");
    }
    
    /**
     * Delete old events that have already ended
     * 
     * @since 1.0.0
     * @return int|false Number of rows deleted, or false on failure
     */
    public function delete_old_events() {
        return $this->wpdb->query(
            $this->wpdb->prepare(
                "DELETE FROM `{$this->table_name}` WHERE end_time < %s",
                current_time('mysql')
            )
        );
    }
    
    /**
     * Get the database version
     * 
     * @since 1.0.0
     * @return string The current database version
     */
    public function get_db_version() {
        return get_option('gcal_db_version', '1.0');
    }
    
    /**
     * Update the database version
     * 
     * @since 1.0.0
     * @param string $version The new version number
     * @return bool True if version was updated, false on failure
     */
    public function update_db_version($version) {
        return update_option('gcal_db_version', $version);
    }
    
    /**
     * Clean up plugin data (for uninstall)
     * 
     * @since 1.0.0
     * @return bool True if cleanup was successful, false otherwise
     */
    public function cleanup() {
        // Delete all plugin options
        $options = [
            'gcal_google_api_key',
            'gcal_calendar_id',
            'gcal_refresh_interval',
            'gcal_last_sync',
            'gcal_db_version'
        ];
        
        $success = true;
        foreach ($options as $option) {
            if (get_option($option) !== false) {
                $success = delete_option($option) && $success;
            }
        }
        
        // Clear any scheduled events
        if (function_exists('wp_clear_scheduled_hook')) {
            wp_clear_scheduled_hook('gcal_sync_events');
        }
        
        // Clear any transients
        if (function_exists('delete_transient')) {
            delete_transient('gcal_events_cache');
        }
        
        return $success;
    }
    
    /**
     * Static method to create the events table (for backward compatibility)
     * 
     * @deprecated 1.1.0 Use instance method create_table() instead
     * @return bool True if table was created, false on failure
     */
    public static function create_events_table() {
        $db = new self();
        return $db->create_table();
    }
    
    /**
     * Create the events table
     * 
     * @return bool True if table was created or already exists, false on failure
     */
    public function create_table() {
        $charset_collate = $this->wpdb->get_charset_collate();
        
        $sql = "CREATE TABLE IF NOT EXISTS `{$this->table_name}` (
            id mediumint(9) NOT NULL AUTO_INCREMENT,
            uid varchar(255) NOT NULL,
            summary text NOT NULL,
            location text DEFAULT '',
            description text DEFAULT '',
            start_time datetime NOT NULL,
            end_time datetime NOT NULL,
            last_modified datetime NOT NULL,
            rrule text DEFAULT '',
            created_at datetime DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY  (id),
            UNIQUE KEY uid (uid),
            KEY start_time (start_time)
        ) $charset_collate;";
        
        require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
        $result = dbDelta($sql);
        
        // Check if we need to add the rrule column (for backward compatibility)
        $column = $this->wpdb->get_row($this->wpdb->prepare(
            "SELECT * FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = %s 
            AND TABLE_NAME = %s 
            AND COLUMN_NAME = 'rrule'",
            DB_NAME,
            $this->table_name
        ));
        
        if (empty($column)) {
            $this->wpdb->query("ALTER TABLE `{$this->table_name}` ADD COLUMN rrule text DEFAULT '' AFTER last_modified");
        }
        
        return !empty($result);
    }
    
    /**
     * Get events from the database
     * 
     * @param int $limit Maximum number of events to return (0 for no limit)
     * @param bool $show_past Whether to include past events
     * @param array $args Additional query arguments
     * @return array Array of event data
     */
    public function get_events($limit = 0, $show_past = false, $args = []) {
        // Set up default arguments
        $defaults = [
            'orderby' => 'start_time',
            'order' => 'ASC',
            'start_date' => null,
            'end_date' => null,
        ];
        
        $args = wp_parse_args($args, $defaults);
        
        // Start building the query
        $query = "SELECT * FROM `{$this->table_name}` WHERE 1=1";
        $query_args = [];
        
        // Add date range conditions if provided
        if ($args['start_date']) {
            $query .= " AND start_time >= %s";
            $query_args[] = $args['start_date'];
        }
        
        if ($args['end_date']) {
            $query .= " AND end_time <= %s";
            $query_args[] = $args['end_date'];
        }
        
        // Add sorting
        $orderby = in_array(strtolower($args['orderby']), ['start_time', 'end_time', 'created_at']) ? 
            $args['orderby'] : 'start_time';
        $order = strtoupper($args['order']) === 'DESC' ? 'DESC' : 'ASC';
        $query .= " ORDER BY {$orderby} {$order}";
        
        // Add limit if specified
        if ($limit > 0) {
            $query .= " LIMIT %d";
            $query_args[] = $limit;
        }
        
        // Prepare and run the query
        if (!empty($query_args)) {
            $query = $this->wpdb->prepare($query, $query_args);
        }
        
        $events = $this->wpdb->get_results($query, ARRAY_A);
        
        // If not showing past events, filter them out
        if (!$show_past) {
            $timezone = wp_timezone();
            $now = new DateTime('now', $timezone);
            
            $events = array_filter($events, function($event) use ($now, $timezone) {
                $event_end = new DateTime($event['end_time'], $timezone);
                return $event_end >= $now;
            });
            
            // Re-index the array after filtering
            $events = array_values($events);
        }
        
        return $events;
    }
    
    /**
     * Get an event by ID
     * 
     * @param int $event_id The event ID
     * @return array|false The event data, or false if not found
     */
    public function get_event($event_id) {
        if (empty($event_id)) {
            return false;
        }
        
        return $this->wpdb->get_row(
            $this->wpdb->prepare(
                "SELECT * FROM `{$this->table_name}` WHERE id = %d LIMIT 1",
                $event_id
            ),
            ARRAY_A
        );
    }
    
    /**
     * Get an event ID by UID
     * 
     * @param string $uid The event UID
     * @return int|false The event ID, or false if not found
     */
    public function get_event_id_by_uid($uid) {
        if (empty($uid)) {
            return false;
        }
        
        return $this->wpdb->get_var(
            $this->wpdb->prepare(
                "SELECT id FROM `{$this->table_name}` WHERE uid = %s LIMIT 1",
                $uid
            )
        );
    }
    
    /**
     * Save an event to the database
     * 
     * @param array $event_data The event data to save
     * @return int|false The inserted/updated event ID, or false on failure
     */
    public function save_event($event_data) {
        // Set default values
        $defaults = [
            'uid' => '',
            'summary' => '',
            'location' => '',
            'description' => '',
            'start_time' => current_time('mysql'),
            'end_time' => current_time('mysql'),
            'last_modified' => current_time('mysql'),
            'rrule' => ''
        ];
        
        // Merge with defaults and sanitize
        $event_data = wp_parse_args($event_data, $defaults);
        $event_data = array_map('wp_strip_all_tags', $event_data);
        
        // Check if this is an update
        $existing_id = $this->get_event_id_by_uid($event_data['uid']);
        
        if ($existing_id) {
            // Update existing event
            $result = $this->wpdb->update(
                $this->table_name,
                $event_data,
                ['id' => $existing_id],
                ['%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s'],
                ['%d']
            );
            
            return $result !== false ? $existing_id : false;
        } else {
            // Insert new event
            $result = $this->wpdb->insert(
                $this->table_name,
                $event_data,
                ['%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s']
            );
            
            return $result ? $this->wpdb->insert_id : false;
        }
    }
    
    /**
     * Delete an event by ID
     * 
     * @param int $event_id The event ID to delete
     * @return bool True on success, false on failure
     */
    public function delete_event($event_id) {
        if (empty($event_id)) {
            return false;
        }
        
        return (bool) $this->wpdb->delete(
            $this->table_name,
            ['id' => $event_id],
            ['%d']
        );
    }
    
    /**
     * Delete all events from the database
     * 
     * @return int|false Number of rows deleted, or false on failure
     */
    public function delete_all_events() {
        return $this->wpdb->query("TRUNCATE TABLE `{$this->table_name}`");
    }
    
    /**
     * Delete old events that have already ended
     * 
     * @return int|false Number of rows deleted, or false on failure
     */
    public function delete_old_events() {
        return $this->wpdb->query(
            $this->wpdb->prepare(
                "DELETE FROM `{$this->table_name}` WHERE end_time < %s",
                current_time('mysql')
            )
        );
    }
    
    /**
     * Check if the events table exists
     * 
     * @return bool True if the table exists, false otherwise
     */
    public function table_exists() {
        return $this->wpdb->get_var("SHOW TABLES LIKE '{$this->table_name}'") === $this->table_name;
    }
    
    /**
     * Drop the events table
     * 
     * @return bool True if table was dropped or didn't exist, false on failure
     */
    public function drop_table() {
        // Check if table exists
        if (!$this->table_exists()) {
            return true;
        }
        
        // Drop the table
        $result = $this->wpdb->query("DROP TABLE IF EXISTS `{$this->table_name}`");
        
        return $result !== false;
    }
    
    /**
     * Static method to create the events table (for backward compatibility)
     * 
     * @deprecated 1.1.0 Use instance method create_table() instead
     * @return bool True if table was created, false on failure
     */
    public static function create_events_table() {
        $db = new self();
        return $db->create_table();
    }
    
    /**
     * Get the database version
     * 
     * @return string The current database version
     */
    public function get_db_version() {
        return get_option('gcal_db_version', '1.0');
    }
    
    /**
     * Update the database version
     * 
     * @param string $version The new version number
     * @return bool True if version was updated, false on failure
     */
    public function update_db_version($version) {
        return update_option('gcal_db_version', $version);
    }
    
    /**
     * Clean up plugin data (for uninstall)
     * 
     * @return bool True if cleanup was successful, false otherwise
     */
    public function cleanup() {
        // Delete all plugin options
        $options = [
            'gcal_google_api_key',
            'gcal_calendar_id',
            'gcal_refresh_interval',
            'gcal_last_sync',
            'gcal_db_version'
        ];
        
        $success = true;
        foreach ($options as $option) {
            if (get_option($option) !== false) {
                $success = delete_option($option) && $success;
            }
        }
        
        // Clear any scheduled events
        if (function_exists('wp_clear_scheduled_hook')) {
            wp_clear_scheduled_hook('gcal_sync_events');
        }
        
        // Clear any transients
        if (function_exists('delete_transient')) {
            delete_transient('gcal_events_cache');
        }
        
        return $success;
    }
}

// Close the class definition
?>
            $sql = "CREATE TABLE $table_name (
                id mediumint(9) NOT NULL AUTO_INCREMENT,
                uid varchar(255) NOT NULL,
                summary text NOT NULL,
                location text DEFAULT '',
                description text DEFAULT '',
                start_time datetime NOT NULL,
                end_time datetime NOT NULL,
                last_modified datetime NOT NULL,
                rrule text DEFAULT '',
                created_at datetime DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY  (id),
                UNIQUE KEY uid (uid),
                KEY start_time (start_time)
            ) $charset_collate;";
            
            require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
            $result = dbDelta($sql);
            
            // Add version to track updates
            update_option('gcal_db_version', '1.1');
            
            return !empty($result);
        }
        
        return true;
    }
    
    /**
     * Create all necessary database tables
     */
    public function create_tables() {
        global $wpdb;
        
        // Check current database version
        $current_version = get_option('gcal_db_version', '1.0');
        
        // Create the events table
        $table_created = self::create_events_table();
        
        // If this is an update from a previous version, run migrations
        if (version_compare($current_version, '1.1', '<')) {
            $table_name = $wpdb->prefix . 'gcal_events';
            
            // Check if rrule column exists
            $column = $wpdb->get_row($wpdb->prepare(
                "SELECT * FROM INFORMATION_SCHEMA.COLUMNS 
                WHERE TABLE_SCHEMA = %s 
                AND TABLE_NAME = %s 
                AND COLUMN_NAME = 'rrule'",
                DB_NAME, 
                $table_name
            ));
            
            // Add rrule column if it doesn't exist
            if (empty($column)) {
                $result = $wpdb->query("ALTER TABLE `$table_name` ADD COLUMN rrule text DEFAULT '' AFTER last_modified");
                if ($result === false) {
                    error_log('Google Calendar Events Manager: Failed to add rrule column');
                    return false;
                }
            }
            
            // Update the version
            update_option('gcal_db_version', '1.1');
        }
        
        return $table_created;
    }
    
    /**
     * Get events from the database
     * 
     * @param int $limit Maximum number of events to return (0 for no limit)
     * @param bool $show_past Whether to include past events
     * @param array $args Additional query arguments
     * @return array Array of event data
     */
    public function get_events($limit = 0, $show_past = false, $args = []) {
        // Set up default arguments
        $defaults = [
            'orderby' => 'start_time',
            'order' => 'ASC',
            'start_date' => null,
            'end_date' => null,
        ];
        
        $args = wp_parse_args($args, $defaults);
        
        // Start building the query
        $query = "SELECT * FROM `{$this->table_name}` WHERE 1=1";
        $query_args = [];
        
        // Add date range conditions if provided
        if ($args['start_date']) {
            $query .= " AND start_time >= %s";
            $query_args[] = $args['start_date'];
        }
        
        if ($args['end_date']) {
            $query .= " AND end_time <= %s";
            $query_args[] = $args['end_date'];
        }
        
        // Add sorting
        $orderby = in_array(strtolower($args['orderby']), ['start_time', 'end_time', 'created_at']) ? 
            $args['orderby'] : 'start_time';
        $order = strtoupper($args['order']) === 'DESC' ? 'DESC' : 'ASC';
        $query .= " ORDER BY {$orderby} {$order}";
        
        // Add limit if specified
        if ($limit > 0) {
            $query .= " LIMIT %d";
            $query_args[] = $limit;
        }
        
        // Prepare and run the query
        if (!empty($query_args)) {
            $query = $this->wpdb->prepare($query, $query_args);
        }
        
        $events = $this->wpdb->get_results($query, ARRAY_A);
        
        // If not showing past events, filter them out
        if (!$show_past) {
            $timezone = wp_timezone();
            $now = new DateTime('now', $timezone);
            
            $events = array_filter($events, function($event) use ($now, $timezone) {
                $event_end = new DateTime($event['end_time'], $timezone);
                return $event_end >= $now;
            });
            
            // Re-index the array after filtering
            $events = array_values($events);
        }
        
        return $events;
    }
    
    /**
     * Get an event ID by UID
     * 
     * @param string $uid The event UID
     * @return int|false The event ID, or false if not found
     */
    public function get_event_id_by_uid($uid) {
        if (empty($uid)) {
            return false;
        }
        
        $query = $this->wpdb->prepare(
            "SELECT id FROM `{$this->table_name}` WHERE uid = %s LIMIT 1",
            $uid
        );
        
        return $this->wpdb->get_var($query);
    }
    
    /**
     * Delete an event by ID
     * 
     * @param int $event_id The event ID to delete
     * @return bool True on success, false on failure
     */
    public function delete_event($event_id) {
        if (empty($event_id)) {
            return false;
        }
        
        return (bool) $this->wpdb->delete(
            $this->table_name,
            ['id' => $event_id],
            ['%d']
        );
    }
    
    /**
     * Delete all events from the database
     * 
     * @return int|false Number of rows deleted, or false on failure
     */
    public function delete_all_events() {
        return $this->wpdb->query("TRUNCATE TABLE `{$this->table_name}`");
    }
    
    /**
     * Check if the events table exists
     * 
     * @return bool True if the table exists, false otherwise
     */
    public function table_exists() {
        return $this->wpdb->get_var("SHOW TABLES LIKE '{$this->table_name}'") === $this->table_name;
    }
    
    /**
     * Drop the events table when uninstalling
     */
    public static function drop_events_table() {
        global $wpdb;
        $table_name = $wpdb->prefix . 'gcal_events';
        
        // Check if table exists before trying to drop it
        if ($wpdb->get_var("SHOW TABLES LIKE '$table_name'") == $table_name) {
            // Drop the table
            $wpdb->query("DROP TABLE IF EXISTS $table_name");
            
            // Remove the version option
            delete_option('gcal_db_version');
            
            return true;
        }
        
        return false;
    }
    
    public function update_or_insert_event($event_data) {
        global $wpdb;
        
        $defaults = [
            'uid' => '',
            'summary' => '',
            'location' => '',
            'description' => '',
            'start_time' => current_time('mysql'),
            'end_time' => current_time('mysql'),
            'last_modified' => current_time('mysql'),
            'rrule' => ''
        ];
        
        $event_data = wp_parse_args($event_data, $defaults);
        
        // Sanitize data
        $event_data = array_map('wp_strip_all_tags', $event_data);
        
        $result = $wpdb->replace(
            $this->table_name,
            $event_data,
            ['%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s']
}

// Update the version
update_option('gcal_db_version', '1.1');
}

return $table_created;
}

/**
 * Get events from the database
 * 
 * @param int $limit Maximum number of events to return (0 for no limit)
 * @param bool $show_past Whether to include past events
 * @param array $args Additional query arguments
 * @return array Array of event data
 */
public function get_events($limit = 0, $show_past = false, $args = []) {
// Set up default arguments
$defaults = [
    'orderby' => 'start_time',
    'order' => 'ASC',
    'start_date' => null,
    'end_date' => null,
];

$args = wp_parse_args($args, $defaults);

// Start building the query
$query = "SELECT * FROM `{$this->table_name}` WHERE 1=1";
$query_args = [];

// Add date range conditions if provided
if ($args['start_date']) {
    $query .= " AND start_time >= %s";
    $query_args[] = $args['start_date'];
}

if ($args['end_date']) {
    $query .= " AND end_time <= %s";
    $query_args[] = $args['end_date'];
}

// Add sorting
$orderby = in_array(strtolower($args['orderby']), ['start_time', 'end_time', 'created_at']) ? 
    $args['orderby'] : 'start_time';
$order = strtoupper($args['order']) === 'DESC' ? 'DESC' : 'ASC';
$query .= " ORDER BY {$orderby} {$order}";

// Add limit if specified
if ($limit > 0) {
    $query .= " LIMIT %d";
    $query_args[] = $limit;
}

// Prepare and run the query
if (!empty($query_args)) {
    $query = $this->wpdb->prepare($query, $query_args);
}

$events = $this->wpdb->get_results($query, ARRAY_A);

// If not showing past events, filter them out
if (!$show_past) {
    $timezone = wp_timezone();
    $now = new DateTime('now', $timezone);

    $events = array_filter($events, function($event) use ($now, $timezone) {
        $event_end = new DateTime($event['end_time'], $timezone);
        return $event_end >= $now;
    });

    // Re-index the array after filtering
    $events = array_values($events);
}

return $events;
}

/**
 * Get an event ID by UID
 * 
 * @param string $uid The event UID
 * @return int|false The event ID, or false if not found
 */
public function get_event_id_by_uid($uid) {
if (empty($uid)) {
    return false;
}

$query = $this->wpdb->prepare(
    "SELECT id FROM `{$this->table_name}` WHERE uid = %s LIMIT 1",
    $uid
);

return $this->wpdb->get_var($query);
}

/**
 * Delete an event by ID
 * 
 * @param int $event_id The event ID to delete
 * @return bool True on success, false on failure
 */
public function delete_event($event_id) {
if (empty($event_id)) {
    return false;
}

return (bool) $this->wpdb->delete(
    $this->table_name,
    ['id' => $event_id],
    ['%d']
);
}

/**
 * Delete all events from the database
 * 
 * @return int|false Number of rows deleted, or false on failure
 */
public function delete_all_events() {
return $this->wpdb->query("TRUNCATE TABLE `{$this->table_name}`");
}

/**
 * Check if the events table exists
 * 
 * @return bool True if the table exists, false otherwise
 */
public function table_exists() {
return $this->wpdb->get_var("SHOW TABLES LIKE '{$this->table_name}'") === $this->table_name;
}

/**
 * Drop the events table
 * 
 * @return bool True if table was dropped or didn't exist, false on failure
 */
public function drop_table() {
// Check if table exists
if (!$this->table_exists()) {
    return true;
}

// Drop the table
$result = $this->wpdb->query("DROP TABLE IF EXISTS `{$this->table_name}`");

return $result !== false;
}

/**
 * Delete old events that have already ended
 * 
 * @return int|false Number of rows deleted, or false on failure
 */
public function delete_old_events() {
return $this->wpdb->query(
    $this->wpdb->prepare(
        "DELETE FROM `{$this->table_name}` WHERE end_time < %s",
        current_time('mysql')
    )
);
}

/**
 * Update or insert an event
 * 
 * @param array $event_data Event data
 * @return bool True on success, false on failure
 */
public function update_or_insert_event($event_data) {
global $wpdb;

$defaults = [
    'uid' => '',
    'summary' => '',
    'location' => '',
    'description' => '',
    'start_time' => current_time('mysql'),
    'end_time' => current_time('mysql'),
    'last_modified' => current_time('mysql'),
    'rrule' => ''
];

$event_data = wp_parse_args($event_data, $defaults);

// Sanitize data
$event_data = array_map('wp_strip_all_tags', $event_data);

$result = $wpdb->replace(
    $this->table_name,
    $event_data,
    ['%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s']
);

return $result !== false;
}
}
